适配器模式:Adapter
	将一个类的接口(Adaptee)适配成用户所期待的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
	类适配器:继承源接口(Adaptee)，实现目标接口(Target)
	对象适配器:在Target的子类里面组合源接口(Adaptee)
	接口适配器:是的用户的类不用实现接口里面的所有方法，只关注所需的方法，此时适配器会对其他方法提供默认实现
	
桥接模式:Bridge
	将抽象部分与它的实现部分分离，使他们都可以独立的变化。
	可以理解为MVC三层模型的面向接口编程
		IService;ServiceImpl;
		IDAO;DAOImpl
		
组合模式:Composite
	将对象组合成树形结构以表示"部分整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
	例如:文件系统，公司层级结构等

装饰器模式:Decorator
	通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。
	Java IO

门面模式:Facade
	使用一个统一的接口去访问多个子系统的多个不同的接口，它为子系统中的一组接口提供一个统一的高层接口，使子系统更容易使用。
	一般来说用于隐藏一些不希望用户看到的东西，但又不能设置成私有，因为在系统内部有些地方需要调用
	HttpServletRequest

代理模式:Proxy
	为其他对象提供一种代理以控制对这个对象的访问
	静态代理
	动态代理:Java Proxy(缺陷:对接口生效)
		   CGLib:通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑

享元模式:FlyWeight
	主要用于较少创建的对象的数量，以较少内存占用和提高性能
	内部状态
	外部状态